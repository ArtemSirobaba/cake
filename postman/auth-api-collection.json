{
  "info": {
    "name": "Auth API Collection",
    "description": "Comprehensive API tests for authentication, posts, and comments endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Sign Up - Valid User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"name\": \"{{userName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/sign-up",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "sign-up"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response has user object', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "});",
                  "",
                  "pm.test('User email matches request', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.user.email).to.eql(pm.variables.get('userEmail'));",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.user && responseJson.user.id) {",
                  "        pm.globals.set('userId', responseJson.user.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Sign Up - Invalid Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"{{userPassword}}\",\n  \"name\": \"{{userName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/sign-up",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "sign-up"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 4xx', function () {",
                  "    pm.expect(pm.response.code).to.be.at.least(400);",
                  "    pm.expect(pm.response.code).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Sign In - Valid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "sign-in"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user object', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "});",
                  "",
                  "pm.test('Session cookie is set', function () {",
                  "    pm.expect(pm.response.headers.get('Set-Cookie')).to.not.be.null;",
                  "});",
                  "",
                  "// Store session cookie for authenticated requests",
                  "const cookies = pm.response.headers.get('Set-Cookie');",
                  "if (cookies) {",
                  "    pm.globals.set('sessionCookie', cookies);",
                  "}",
                  "",
                  "// Store user ID",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.user && responseJson.user.id) {",
                  "    pm.globals.set('userId', responseJson.user.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Sign In - Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "sign-in"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 4xx', function () {",
                  "    pm.expect(pm.response.code).to.be.at.least(400);",
                  "    pm.expect(pm.response.code).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Session",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "{{sessionCookie}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/session",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "session"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user object', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Sign Out",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Cookie",
                "value": "{{sessionCookie}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/sign-out",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "sign-out"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 204', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Posts",
      "item": [
        {
          "name": "Get All Posts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/posts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Posts are in descending order by createdAt', function () {",
                  "    const posts = pm.response.json();",
                  "    if (posts.length > 1) {",
                  "        for (let i = 0; i < posts.length - 1; i++) {",
                  "            const currentDate = new Date(posts[i].createdAt);",
                  "            const nextDate = new Date(posts[i + 1].createdAt);",
                  "            pm.expect(currentDate.getTime()).to.be.at.least(nextDate.getTime());",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Post - Authenticated",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "{{sessionCookie}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{postTitle}}\",\n  \"content\": \"{{postContent}}\",\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Post has required properties', function () {",
                  "    const post = pm.response.json();",
                  "    pm.expect(post).to.have.property('id');",
                  "    pm.expect(post).to.have.property('title');",
                  "    pm.expect(post).to.have.property('content');",
                  "    pm.expect(post).to.have.property('userId');",
                  "    pm.expect(post).to.have.property('createdAt');",
                  "    pm.expect(post).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Post title matches request', function () {",
                  "    const post = pm.response.json();",
                  "    pm.expect(post.title).to.eql(pm.variables.get('postTitle'));",
                  "});",
                  "",
                  "// Store post ID for comment tests",
                  "const post = pm.response.json();",
                  "if (post.id) {",
                  "    pm.globals.set('postId', post.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Post - Unauthenticated",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Unauthorized Post\",\n  \"content\": \"This should not be created\",\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error', 'Unauthorized');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Post - Missing Title",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "{{sessionCookie}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Post without title\",\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error', 'Missing required fields');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "Get Comments for Post",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/posts/{{postId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts", "{{postId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Comments are in descending order by createdAt', function () {",
                  "    const comments = pm.response.json();",
                  "    if (comments.length > 1) {",
                  "        for (let i = 0; i < comments.length - 1; i++) {",
                  "            const currentDate = new Date(comments[i].createdAt);",
                  "            const nextDate = new Date(comments[i + 1].createdAt);",
                  "            pm.expect(currentDate.getTime()).to.be.at.least(nextDate.getTime());",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Comment - Authenticated",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "{{sessionCookie}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"{{commentContent}}\",\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts/{{postId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts", "{{postId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Comment has required properties', function () {",
                  "    const comment = pm.response.json();",
                  "    pm.expect(comment).to.have.property('id');",
                  "    pm.expect(comment).to.have.property('content');",
                  "    pm.expect(comment).to.have.property('userId');",
                  "    pm.expect(comment).to.have.property('postId');",
                  "    pm.expect(comment).to.have.property('userName');",
                  "    pm.expect(comment).to.have.property('createdAt');",
                  "    pm.expect(comment).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Comment content matches request', function () {",
                  "    const comment = pm.response.json();",
                  "    pm.expect(comment.content).to.eql(pm.variables.get('commentContent'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Comment - Unauthenticated",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Unauthorized comment\",\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts/{{postId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts", "{{postId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error', 'Unauthorized');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Comment - Missing Content",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "{{sessionCookie}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/posts/{{postId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["api", "posts", "{{postId}}", "comments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error', 'Missing required fields');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "userEmail",
      "value": "postman.test@example.com",
      "type": "string"
    },
    {
      "key": "userPassword",
      "value": "PostmanTest123!",
      "type": "string"
    },
    {
      "key": "userName",
      "value": "Postman Test User",
      "type": "string"
    },
    {
      "key": "postTitle",
      "value": "Test Post from Postman",
      "type": "string"
    },
    {
      "key": "postContent",
      "value": "This is a test post created via Postman API testing",
      "type": "string"
    },
    {
      "key": "commentContent",
      "value": "This is a test comment created via Postman API testing",
      "type": "string"
    }
  ]
}
